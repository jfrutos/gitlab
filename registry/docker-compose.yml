version: "2"

services:
  portus:
    build:
      context: ./
      dockerfile: dockerfile-portus
    environment:
      - PORTUS_MACHINE_FQDN_VALUE=${MACHINE_FQDN}

      # DB. The password for the database should definitely not be here. You are
      # probably better off with Docker Swarm secrets.
      - PORTUS_PRODUCTION_HOST=db
      - PORTUS_PRODUCTION_DATABASE=portus_production
      - PORTUS_PRODUCTION_PASSWORD=${DATABASE_PASSWORD}
      - PORTUS_DB_POOL=5

      # Secrets. It can possibly be handled better with Swarm's secrets.
      - PORTUS_SECRET_KEY_BASE=${SECRET_KEY_BASE}
      - PORTUS_KEY_PATH=/certificates/wildcard.key
      - PORTUS_PASSWORD=${PORTUS_PASSWORD}

      # SSL
      - PORTUS_PUMA_TLS_KEY=/certificates/wildcard.key
      - PORTUS_PUMA_TLS_CERT=/certificates/wildcard.crt


      # NGinx is serving the assets instead of Puma. If you want to change this,
      # uncomment this line.
      #- RAILS_SERVE_STATIC_FILES='true'
    ports:
      - 3000:3000
    links:
      - db
    volumes:
       - static:/srv/Portus/public

  crono:
    build:
      context: ./
      dockerfile: dockerfile-portus
    environment:
      - PORTUS_MACHINE_FQDN_VALUE=${MACHINE_FQDN}

      # DB. The password for the database should definitely not be here. You are
      # probably better off with Docker Swarm secrets.
      - PORTUS_PRODUCTION_HOST=db
      - PORTUS_PRODUCTION_DATABASE=portus_production
      - PORTUS_PRODUCTION_PASSWORD=${DATABASE_PASSWORD}
      - PORTUS_DB_POOL=5

      # Secrets. It can possibly be handled better with Swarm's secrets.
      - PORTUS_SECRET_KEY_BASE=${SECRET_KEY_BASE}
      - PORTUS_KEY_PATH=/certificates/wildcard.key
      - PORTUS_PASSWORD=${PORTUS_PASSWORD}

      # We want to execute crono, not portus
      - PORTUS_INIT_COMMAND=bin/crono
    links:
      - db

  db:
    image: library/mariadb:10.0.23
    environment:
      - MYSQL_DATABASE=portus_production

      # Again, the password shouldn't be handled like this.
      - MYSQL_ROOT_PASSWORD=${DATABASE_PASSWORD}
    volumes:
      - mariadb-data:/var/lib/mysql

  registry:
    build:
      context: ./
      dockerfile: dockerfile-registry
    command: ["/bin/sh", "/etc/docker/registry/init"]
    environment:
      # Authentication
      REGISTRY_AUTH_TOKEN_REALM: https://${MACHINE_FQDN}/v2/token
      REGISTRY_AUTH_TOKEN_SERVICE: ${MACHINE_FQDN}
      REGISTRY_AUTH_TOKEN_ISSUER: ${MACHINE_FQDN}
      REGISTRY_AUTH_TOKEN_ROOTCERTBUNDLE: /secrets/wildcard.crt

      # SSL
      REGISTRY_HTTP_TLS_CERTIFICATE: /secrets/wildcard.crt
      REGISTRY_HTTP_TLS_KEY: /secrets/wildcard.key

      # Portus endpoint
      REGISTRY_NOTIFICATIONS_ENDPOINTS: >
        - name: portus
          url: https://${MACHINE_FQDN}/v2/webhooks/events
          timeout: 2000ms
          threshold: 5
          backoff: 1s
    volumes:
      - registry-data:/var/lib/registry
    ports:
      - 5000:5000
      - 5001:5001 # required to access debug service
    links:
      - portus:portus
    extra_hosts:
      - "registry.shl.com:${EXTERNAL_IP}"

  nginx:
    build:
      context: ./
      dockerfile: dockerfile-nginx
    volumes:
      - static:/srv/Portus/public:ro
    ports:
      - 80:80
      - 443:443
    links:
      - registry:registry
      - portus:portus

volumes:
  static:
    driver: local
  registry-data:
    driver: local
  mariadb-data:
    driver: local
